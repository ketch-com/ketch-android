syntax = "proto3";

package transponder;

option go_package = "go.ketch.com/api/transponder;transponder";

import "lib/google/protobuf/empty.proto";
import "lib/google/protobuf/struct.proto";

/*

V2 Parking Lot:
* Usage based consent (5 uses)
* 2FA?

Follow up:
* How to identify who is sending this to me?
	- this is given by the `X-OpenDsr-ProcessorDomain` and the signature
* How does a processor set status of their request not affecting other processors?

*/

// Capability is something supported by the service
enum Capability {
	// InvalidCapability is an invalid capability
	InvalidCapability = 0;

	// InvokeRightCapability is the capability to InvokeRights
	InvokeRightCapability = 1; // invoke_right

	// SetConsentCapability is the capability to SetConsent
	SetConsentCapability = 2; // set_consent

	// CancelRightCapability is the capability to CancelRight
	CancelRightCapability = 3; // cancel_right

	// GetRightStatusCapability is the capability to GetRightStatus
	RightStatusCapability = 4; // get_right_status

	// CallbackCapability is the capability to support calling callbacks
	CallbackCapability = 5; // callback
}

// InvokableRight describes a right that can be invoked
enum InvokableRight {
	// InvalidInvokableRight denotes an invalid invokable right
	InvalidInvokableRight = 0;

	// AccessInvokableRight denotes the right to access data
	AccessInvokableRight = 1; // OpenDSR: access

	// AnonymizeInvokableRight denotes the right to anonymize data
	AnonymizeInvokableRight = 2; // OpenDSR: not supported

	// ErasureInvokableRight denotes the right to erase/delete data
	ErasureInvokableRight = 3; // OpenDSR: erasure

	// ObjectInvokableRight denotes the right to object
	ObjectInvokableRight = 4; // OpenDSR: not supported

	// PortabilityInvokableRight denotes the right to portability of data
	PortabilityInvokableRight = 5; // OpenDSR: portability

	// RectificationInvokableRight denotes the right of rectification of data
	RectificationInvokableRight = 6; // OpenDSR: not supported
}

// DataSubjectVerification describes how a data subject has been verified
enum DataSubjectVerification {
	// NoDataSubjectVerification denotes data subject identity has not been verified
	NoDataSubjectVerification = 0;

	// CaptchaDataSubjectVerification denotes data subject has completed a CAPTCHA to verify they are a human
	CaptchaDataSubjectVerification = 1; // OpenDSR: not supported

	// EmailDataSubjectVerification denotes data subject has clicked on a link in an email to verify they own the email
	EmailDataSubjectVerification = 2; // OpenDSR: not supported

	// SmsDataSubjectVerification denotes data subject has been verified via SMS
	SmsDataSubjectVerification = 3; // OpenDSR: not supported

	// AuthenticatedDataSubjectVerification denotes data subject has logged in
	AuthenticatedDataSubjectVerification = 4; // OpenDSR: not supported

	// GovernmentIDDataSubjectVerification denotes data subject has presented a government-issued ID
	GovernmentIDDataSubjectVerification = 5; // OpenDSR: not supported
}

// RightProcessingStatus describes the status of a right invocation request
enum RightProcessingStatus {
	// InvalidRightProcessingStatus indicates that the status is in valid
	InvalidRightProcessingStatus = 0;

	// PendingRightProcessingStatus indicates that a well formed request has been received by the Processor
	PendingRightProcessingStatus = 1; // OpenDSR: pending

	// InProgressRightProcessingStatus indicates that a request is currently being acted on. Processors SHOULD
	// indicate this request if possible
	InProgressRightProcessingStatus = 2; // OpenDSR: in_progress

	// CompletedRightProcessingStatus indicates that a request has been fulfilled
	CompletedRightProcessingStatus = 3; // OpenDSR: completed

	// CancelledRightProcessingStatus indicates that a request has been cancelled
	CancelledRightProcessingStatus = 4; // OpenDSR: cancelled

	// FailedRightProcessingStatus indicates that a request has failed to be completed
	FailedRightProcessingStatus = 5; // OpenDSR: not supported
}

// IdentityFormat describes how the identity value is formatted
enum IdentityFormat {
	// RawIdentityFormat denotes the format is verbatim as it is represented
	RawIdentityFormat = 0; // OpenDSR: raw

	// Sha1IdentityFormat denotes the value has been SHA1 one-way hashed
	Sha1IdentityFormat = 1; // OpenDSR: sha1

	// Sha256IdentityFormat denotes the value has been SHA256 one-way hashed
	Sha256IdentityFormat = 2; // OpenDSR: sha256

	// Sha512IdentityFormat denotes the value has been SHA512 one-way hashed
	Sha512IdentityFormat = 3; // OpenDSR: not supported

	// OpenDSR: missing md5 because it is trivially compromised
}

// IdentityType describes the type of identity
enum IdentityType {
	// InvalidIdentityType denotes the type is invalid
	InvalidIdentityType = 0;

	// EmailIdentityType denotes an email
	EmailIdentityType = 1;  // OpenDSR: email

	// ControllerCustomerIdIdentityType denotes a customer ID according to the controller
	ControllerCustomerIdIdentityType = 2; // OpenDSR: controller_customer_id

	// AndroidAdvertisingIdIdentityType denotes the Android Advertising ID
	AndroidAdvertisingIdIdentityType = 3; // OpenDSR: android_advertising_id

	// AndroidIdIdentityType denotes the Android ID
	AndroidIdIdentityType = 4; // OpenDSR: android_id

	// FireAdvertisingIdIdentityType denotes the Fire Advertising ID
	FireAdvertisingIdIdentityType = 5; // OpenDSR: fire_advertising_id

	// IosAdvertisingIdIdentityType denotes the iOS Advertising ID
	IosAdvertisingIdIdentityType = 6; // OpenDSR: ios_advertising_id

	// IosVendorIdIdentityType denotes the iOS Vendor ID
	IosVendorIdIdentityType = 7; // OpenDSR: ios_vendor_id

	// MicrosoftAdvertisingIdIdentityType denotes the Microsoft Advertising ID
	MicrosoftAdvertisingIdIdentityType = 8; // OpenDSR: microsoft_advertising_id

	// MicrosoftPublisherIdIdentityType denotes the Microsoft Publisher ID
	MicrosoftPublisherIdIdentityType = 9; // OpenDSR: microsoft_publisher_id

	// RokuPublisherIdIdentityType denotes the Roku Publisher ID
	RokuPublisherIdIdentityType = 10; // OpenDSR: roku_publisher_id

	// RokuAdvertisingIdIdentityType denotes the Roku Advertising ID
	RokuAdvertisingIdIdentityType = 11; // OpenDSR: roku_advertising_id

	// UniqueBrowserIdIdentityType denotes a (potentially ephemeral) Unique Browser ID (cookie or other)
	UniqueBrowserIdIdentityType = 12; // OpenDSR: not supported
}

// Regulation describes the regulation being appealed to
enum Regulation {
	// InvalidRegulation denotes an invalid regulation specified
	InvalidRegulation = 0;

	// GDPR (EU)
	GdprRegulation = 1; // OpenDSR: gdpr

	// CCPA (US-CA)
	CcpaRegulation = 2; // OpenDSR: ccpa

	// LGPD (BR)
	LgpdRegulation = 3; // OpenDSR: not supported

	// APP (AU)
	AppRegulation = 5; // OpenDSR: not supported

	// PIPEDA (CA)
	PipedaRegulation = 6; // OpenDSR: not supported

	// PDP (IN)
	PdpRegulation = 7; // OpenDSR: not supported

	// APPI (JP)
	AppiRegulation = 8; // OpenDSR: not supported

	// CSL (CN)
	CslRegulation = 9; // OpenDSR: not supported

	// PPL (IL)
	PplRegulation = 10; // OpenDSR: not supported
}

// CollectionMethod describes how the request was collected
enum CollectionMethod {
	// UnknownCollectionMethod denotes we do not know how the request was collected
	UnknownCollectionMethod = 0;

	// EmailCollectionMethod denotes the request was collected via email
	EmailCollectionMethod = 1; // OpenDSR: not supported

	// WebCollectionMethod denotes the request was collected via a web form
	WebCollectionMethod = 2; // OpenDSR: not supported

	// AppCollectionMethod denotes the request was collected via an App
	AppCollectionMethod = 3; // OpenDSR: not supported

	// PhoneCollectionMethod denotes the request was collected via phone conversation/message
	PhoneCollectionMethod = 4; // OpenDSR: not supported
}

// LegalBasis describes the legal basis appealed to
enum LegalBasis {
	// Invalid legal basis
	InvalidLegalBasis = 0;

	// Data subject has been provided with adequate disclosure regarding the processing
	DisclosureLegalBasis = 1; // OpenDSR: not supported

	// Data subject has affirmatively and unambiguously consented to the processing for one or more specific purposes
	ConsentOptInLegalBasis = 2; // OpenDSR: not supported

	// Data subject has received adequate disclosure describing the processing for one or more specific purposes,
	// and can subsequently opt-out
	ConsentOptOutLegalBasis = 3; // OpenDSR: not supported

	// Necessary for the performance of a contract to which the data subject is party or in order to take steps at the
	// request of the data subject prior to entering into a contract
	ContractLegalBasis = 4; // OpenDSR: not supported

	// Processing for the protection of credit
	CreditLegalBasis = 5; // OpenDSR: not supported

	// Processing to protect health, in a procedure carried out by health professionals/entities
	HealthLegalBasis = 6; // OpenDSR: not supported

	// Necessary for compliance with a legal obligation to which the controller is subject
	LegalObligationsLegalBasis = 7; // OpenDSR: not supported

	// Necessary for the purposes of the legitimate interests pursued by the controller or by a third party, except
	// where such interests are overridden by the interests or fundamental rights and freedoms of the data subject
	LegitimateInterestLegalBasis = 8; // OpenDSR: not supported

	// Processing for the protection of life or physical safety of the data subject or a third party
	LifeLegalBasis = 9; // OpenDSR: not supported

	// Necessary for the performance of a task carried out in the public interest or in the exercise of official
	// authority vested in the controller
	PublicInterestLegalBasis = 10; // OpenDSR: not supported

	// Processing for studies by research entities, ensuring whenever possible the anonymization of personal data
	ResearchLegalBasis = 11; // OpenDSR: not supported

	// Necessary to protect the vital interests of the data subject or of another natural person
	VitalInterestsLegalBasis = 12; // OpenDSR: not supported
}

// Identity describes the way of identifying a data subject
message Identity {
	// IdentityType is the name of the identity space
	IdentityType identity_type = 1; // OpenDSR: identity_type

	// IdentityValue is the actual identity value
	string identity_value = 2; // OpenDSR: identity_value

	// IdentityFormat specifies the format of the identity value
	IdentityFormat identity_format = 3; // OpenDSR: identity_format
}

// DataSubject describes the information required about a data subject
message DataSubject {
	// First is the data subject's first name
	string first = 1; // OpenDSR: not supported

	// Last is the data subject's last name
	string last = 2; // OpenDSR: not supported

	// County is the data subject's country code (ISO 3166-2)
	string country = 3; // OpenDSR: not supported

	// StateRegion is the data subject's state/region code (ISO 3166-2)
	string state_region = 4; // OpenDSR: not supported

	// VerificationMethod specifies how the data subject was verified
	DataSubjectVerification verification_method = 5; // OpenDSR: not supported
}

// Controller describes a data controller
message Controller {
	// ID is the identifier of the controller in the originating system
	string id = 1; // OpenDSR: not supported

	// Name is the name of the controller in the originating system
	string name = 2; // OpenDSR: not supported

	// LogoURL is a valid URL to the logo of the controller
	string logo_url = 3; // OpenDSR: not supported

	// AccountID is the account ID of the controller in the processor system
	string account_id = 4; // OpenDSR: not supported
}

// Context provides information to know how a request was collected
message Context {
	// CollectedFrom specifies how the request was received
	CollectionMethod collected_from = 1; // OpenDSR: not supported

	// Application specifies the website or application ID where the request was received
	string application = 2; // OpenDSR: not supported

	// Environment specifies the environment (production, testing, etc)
	string environment = 3; // OpenDSR: not supported
}

// Purpose describes a purpose.
message Purpose {
	// Purpose is the code/id/url of the purpose
	string purpose = 1; // OpenDSR: not supported

	// LegalBasis describes the basis on which the purpose consent has been provided
	LegalBasis legal_basis = 2; // OpenDSR: not supported

	// Allowed is set to true if the purpose is allowed
	bool allowed = 3; // OpenDSR: not supported
}

// PurposeDescription describes a purpose
message PurposeDescription {
	// Purpose is the code/id/url of the purpose
	string purpose = 1; // OpenDSR: not supported

	// Description is a human-readable description of the purpose
	string description = 2; // OpenDSR: not supported
}

// SupportedIdentity represents a supported type/format pair
message SupportedIdentity {
	// IdentityType is the name of the identity space
	IdentityType identity_type = 1; // OpenDSR: identity_type

	// IdentityFormat specifies the format of the identity value
	IdentityFormat identity_format = 2; // OpenDSR: identity_format
}

// Consent represents a consent to a purpose
message Consent {
	// Purpose is the consent purpose
	string purpose = 1;

	// LegalBasis is the legal basis appealed to
	LegalBasis legal_basis = 2;

	// Allowed is true if the purpose is allowed
	bool allowed = 3;
}

// InvokeRightRequest is the request sent to the service to invoke a right
message InvokeRightRequest {
	// RequestID is the unique identifier of the request
	string request_id = 1; // OpenDSR: subject_request_id

	// Regulation is the regulation under which this right was invoked
	Regulation regulation = 2; // OpenDSR: regulation

	// Right is the actual right being invoked
	InvokableRight right = 3; // OpenDSR: subject_request_type

	// DataSubject is the details about the data subject invoking the right.
	DataSubject data_subject = 4; // OpenDSR: not supported

	// Identities is a list of identities for the data subject.
	repeated Identity identities = 5; // OpenDSR: subject_identities

	// Controller is the details about the controller
	Controller controller = 6; // OpenDSR: not supported

	// SubmittedTime is the timestamp when this right was originally invoked.
	int64 submitted_time = 7; // OpenDSR: submitted_time

	// DueTime is the timestamp when this right invocation request should be completed.
	int64 due_time = 8; // OpenDSR: not supported

	// Context provides information about where and how the right invocation was collected.
	Context context = 9; // OpenDSR: not supported

	// StatusCallbackUrls is a list of URL's that are to be called back with status of the request.
	repeated string status_callback_urls = 10; // OpenDSR: status_callback_urls

	// Extensions allow vendor-scoped extensions to the protocol
	google.protobuf.Struct extensions = 100; // OpenDSR: extensions
}

// InvokeRightResponse is the response returned from invoking a right
message InvokeRightResponse {
	// RequestID is the unique identifier of the request
	string request_id = 1; // OpenDSR: subject_request_id

	// ControllerID is the unique identity of the Controller in the Processor’s system.
	string controller_id = 2; // OpenDSR: controller_id

	// ExpectedCompletionTime is the time when the Processor expects to fulfill the request.
	int64 expected_completion_time = 3; // OpenDSR: expected_completion_time

	// ReceivedTime is the time when the Processor received the request.
	int64 received_time = 4; // OpenDSR: received_time

	// OpenDSR: missing encoded_request
}

// SetConsentRequest is the request sent to the service to set consent
message SetConsentRequest {
	// OpenDSR: not supported

	// RequestID is the unique identifier of the request
	string request_id = 1;

	// Regulation is the regulation under which this right was invoked
	Regulation regulation = 2;

	// Purposes is a list of purposes
	repeated Purpose purposes = 4;

	// DataSubject is the details about the data subject invoking the right
	DataSubject data_subject = 5;

	// Identities is a list of identities for the data subject.
	repeated Identity identities = 6;

	// Controller is the details about the controller
	Controller controller = 7;

	// InvokedTime is the timestamp when this consent was originally collected
	int64 invoked_time = 8;

	// ExpiryTime is the timestamp when this consent expires
	int64 expiry_time = 9;

	// Context provides information about where and how the right invocation was collected
	Context context = 10;

	// Extensions allow vendor-scoped extensions to the protocol
	google.protobuf.Struct extensions = 100;
}

// SetConsentResponse is the response returned when consent is set
message SetConsentResponse {
	// OpenDSR: not supported

	// RequestID is the unique identifier of the request
	string request_id = 1;

	// ReceivedTime is the time when the Processor received the request
	int64 received_time = 3;
}

// SetRightStatusRequest is the request sent to a status callback to provide status on the right request
message SetRightStatusRequest {
	// RequestID is the unique identifier of the request
	string request_id = 1; // OpenDSR: subject_request_id

	// ControllerID is the unique identity of the Controller in the Processor’s system
	string controller_id = 2; // OpenDSR: controller_id

	// Status is the status of the request
	RightProcessingStatus status = 3; // OpenDSR: request_status

	// ExpectedCompletionTime is the timestamp when the Processor expects to fulfill the request
	int64 expected_completion_time = 4; // OpenDSR: expected_completion_time

	// ResultsUrl is the URL where the results of the request are available
	string results_url = 5; // OpenDSR: results_url

	// ResultsCount is a count of results found when fulfilling this request
	int64 results_count = 6; // OpenDSR: results_count

	// StatusCallbackUrl is the URL being called
	string status_callback_url = 7; // OpenDSR: status_callback_url
}

// GetRightStatusRequest is the request sent to the service to get the status of a right request
message GetRightStatusRequest {
	// RequestID is the unique identifier of the request
	string request_id = 1; // OpenDSR: subject_request_id (in the URL)
}

// GetRightStatusResponse is the response returned from the service providing the status of the request
message GetRightStatusResponse {
	// RequestID is the unique identifier of the request
	string request_id = 1; // OpenDSR: subject_request_id

	// ControllerID is the unique identity of the Controller in the Processor’s system
	string controller_id = 2; // OpenDSR: controller_id

	// Status is the status of the request
	RightProcessingStatus status = 3; // OpenDSR: request_status

	// ExpectedCompletionTime is the timestamp when the Processor expects to fulfill the request
	int64 expected_completion_time = 4; // OpenDSR: expected_completion_time

	// ResultsUrl is the URL where the results of the request are available
	string results_url = 5; // OpenDSR: results_url

	// ResultsCount is a count of results found when fulfilling this request
	int64 results_count = 6; // OpenDSR: results_count
}

// CancelRightRequest is the request sent to the service to cancel a right request
message CancelRightRequest {
	// RequestID is the unique identifier of the request
	string request_id = 1; // OpenDSR: subject_request_id (in the URL)
}

// CancelRightResponse is the response sent from the service when a right request cancellation has been received
message CancelRightResponse {
	// RequestID is the unique identifier of the request
	string request_id = 1; // OpenDSR: subject_request_id

	// ControllerID is the unique identity of the Controller in the Processor’s system
	string controller_id = 2; // OpenDSR: controller_id

	// ReceivedTime is the time when the Processor received the cancellation request
	int64 received_time = 3; // OpenDSR: received_time

	// Status is the status of the request
	RightProcessingStatus status = 4; // OpenDSR: not supported
}

// DiscoverCapabilitiesResponse is the response sent from a service that specifies the capabilities of the service
message DiscoverCapabilitiesResponse {
	// SupportedCapabilities lists the capabilities supported by the service
	repeated Capability supported_capabilities = 1; // OpenDSR: not supported

	// SupportedRegulations lists the regulations supported by the service
	repeated Regulation supported_regulations = 2; // OpenDSR: not supported

	// SupportedIdentities lists the identity types/formats supported by the service
	repeated SupportedIdentity supported_identities = 4; // OpenDSR: supported_identities

	// SupportedPurposes lists the purposes supported by the service
	repeated PurposeDescription supported_purposes = 5; // OpenDSR: not supported

	// SupportedRights lists the rights supported by the service
	repeated InvokableRight supported_rights = 6; // OpenDSR: supported_subject_request_types
}

// GetConsentRequest
message GetConsentRequest {
	// RequestID is the unique identifier of the request
	string request_id = 1;

	// Context provides context for how the consent was requested
	Context context = 3;

	// Identities is a list of identities
	repeated Identity identities = 4;

	// Consents is a list of Purpose/Legal bases
	repeated Consent purposes = 6;
}

// GetConsentResponse
message GetConsentResponse {
	// RequestID is the unique identifier of the request
	string request_id = 1;

	// Consents is a list of consents available
	repeated Consent consents = 2;
}

// TransponderRights service
service TransponderRights {
	// InvokeRight is used to invoke a right for a data subject
	rpc InvokeRight (InvokeRightRequest) returns (InvokeRightResponse);

	// SetRightStatus is used to provide a callback from another service to set the right status
	rpc SetRightStatus (SetRightStatusRequest) returns (google.protobuf.Empty);

	// GetRightStatus is used to get a right status
	rpc GetRightStatus (GetRightStatusRequest) returns (GetRightStatusResponse);

	// CancelRight is used to cancel a right request already issued
	rpc CancelRight (CancelRightRequest) returns (CancelRightResponse);
}

// TransponderConsent service
service TransponderConsent {
	// GetConsent is used to retrieve existing consents from a data subject
	rpc GetConsent (GetConsentRequest) returns (GetConsentResponse);

	// SetConsent is used to provide the consents from a data subject
	rpc SetConsent (SetConsentRequest) returns (SetConsentResponse);
}

// TransponderDiscovery service
service TransponderDiscovery {
	// DiscoverCapabilities is used to discover the capabilities of the service
	rpc DiscoverCapabilities (google.protobuf.Empty) returns (DiscoverCapabilitiesResponse);
}
